import {useEffect, useRef, useState} from "react";
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { Col, Row } from "react-bootstrap";
import DepartureBoard from '../public/js/departure-board';
import axios from "axios";

export default function Home({ apiBase, teams, events }) {
  const tvScreenDisplayRef = useRef();
  const tvScreenContentRef = useRef();
  const gaugeBoardTeam1Ref = useRef();
  const gaugeBoardTeam2Ref = useRef();
  const gaugeBoardTeam3Ref = useRef();
  const gaugeBoardTeam4Ref = useRef();

  const [gaugeBoardTeams, setGaugeBoardTeams] = useState({});
  const [currentTeams, setCurrentTeams] = useState(teams);
  const [currentEvents, setCurrentEvents] = useState(events);

  const scrollDown = (isFirst = false) => {
    let timeoutIdScrollTop;
    if (!isFirst) {
      tvScreenDisplayRef.current.classList.remove(styles.turnOn);
      timeoutIdScrollTop = setTimeout(() => {
        tvScreenDisplayRef.current.classList.add(styles.turnOn);
        tvScreenContentRef.current.scrollTo({
          top: 0,
          behavior: 'instant'
        });
      }, 10000);
    }

    let intervalId;
    const timeoutIdScrollDown = setTimeout(() => {
      intervalId = setInterval(() => {
        if (tvScreenContentRef.current.scrollTop + tvScreenContentRef.current.offsetHeight >= tvScreenContentRef.current.scrollHeight - 5) {
          clearInterval(intervalId);
          return scrollDown();
        }
        tvScreenContentRef.current.scrollTo({
          top: tvScreenContentRef.current.scrollTop + 5,
          behavior: 'smooth'
        });
      }, 100);
    }, isFirst ? 10000 : 20000);

    return { timeoutIdScrollTop, timeoutIdScrollDown, intervalId };
  };

  useEffect(() => {
    const { timeoutIdScrollTop, timeoutIdScrollDown, intervalId } = scrollDown(true);
    return () => {
      if (timeoutIdScrollTop) {
        clearTimeout(timeoutIdScrollTop);
      }
      clearTimeout(timeoutIdScrollDown);
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, []);

  useEffect(() => {
    const teamBoard1 = new DepartureBoard(gaugeBoardTeam1Ref.current, { letterCount: 6 });
    const teamBoard2 = new DepartureBoard(gaugeBoardTeam2Ref.current, { letterCount: 6 });
    const teamBoard3 = new DepartureBoard(gaugeBoardTeam3Ref.current, { letterCount: 6 });
    const teamBoard4 = new DepartureBoard(gaugeBoardTeam4Ref.current, { letterCount: 6 });
    setGaugeBoardTeams({
      teamBoard1,
      teamBoard2,
      teamBoard3,
      teamBoard4,
    });
  }, []);

  useEffect(() => {
    const intervalId = setInterval(async () => {
      const { data: teams } = await axios.get(`${apiBase}/teams`);
      const { data: events } = await axios.get(`${apiBase}/events`);
      setCurrentTeams(teams);
      setCurrentEvents(events);
    }, 30000);
    return () => clearInterval(intervalId);
  }, []);

  useEffect(() => {
    if (gaugeBoardTeams?.teamBoard1 && currentTeams?.[0]) {
      gaugeBoardTeams.teamBoard1.setValue(currentTeams[0].score.toString());
    }
    if (gaugeBoardTeams?.teamBoard2 && currentTeams?.[1]) {
      gaugeBoardTeams.teamBoard2.setValue(currentTeams[1].score.toString());
    }
    if (gaugeBoardTeams?.teamBoard3 && currentTeams?.[2]) {
      gaugeBoardTeams.teamBoard3.setValue(currentTeams[2].score.toString());
    }
    if (gaugeBoardTeams?.teamBoard4 && currentTeams?.[3]) {
      gaugeBoardTeams.teamBoard4.setValue(currentTeams[3].score.toString());
    }
  }, [gaugeBoardTeams, currentTeams]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Vault-Epitech</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Row className="w-100">
          <Col lg={2} className={styles.teamGauges}>
            <div className={styles.teamGauge}>
              <div className={styles.gauge}>
                <div className={`${styles.needle} ${styles.move1}`}></div>
              </div>
              <div ref={gaugeBoardTeam1Ref}></div>
            </div>
            <div className={styles.teamGauge}>
              <div className={styles.gauge}>
                <div className={`${styles.needle} ${styles.move2}`}></div>
              </div>
              <div ref={gaugeBoardTeam2Ref}></div>
            </div>
          </Col>
          <Col lg={8} className={styles.tvContainer}>
            <div className="w-100 position-relative">
              <div className={styles.tvScreen}>
                <div ref={tvScreenDisplayRef} className={`${styles.tvScreenDisplay} ${styles.turnOn}`}>
                  <div className={styles.tvScreenMan}></div>
                  <div ref={tvScreenContentRef} className={styles.tvScreenContent}>
                    <div className="mb-3">
                      <u className="fs-4">25 Derniers evenements:</u>
                    </div>
                    {currentEvents.map(event => (
                      <div key={event.id} className="mb-2">
                        - {event.team?.name ?? '?'}: {event.score < 0 ? event.score : `+${event.score}`} pour "{event.reason}"
                      </div>
                    ))}
                  </div>
                </div>
                <div className={styles.tvScreenOverlay}>AV-1</div>
              </div>
              <div className={styles.tvBorder}></div>
            </div>
          </Col>
          <Col lg={2} className={styles.teamGauges}>
            <div className={styles.teamGauge}>
              <div className={styles.gauge}>
                <div className={`${styles.needle} ${styles.move3}`}></div>
              </div>
              <div ref={gaugeBoardTeam3Ref}></div>
            </div>
            <div className={styles.teamGauge}>
              <div className={styles.gauge}>
                <div className={`${styles.needle} ${styles.move4}`}></div>
              </div>
              <div ref={gaugeBoardTeam4Ref}></div>
            </div>
          </Col>
        </Row>
      </main>
    </div>
  )
}

export async function getStaticProps() {
  const apiBase = process.env.API_URL;

  const { data: teams } = await axios.get(`${apiBase}/teams`);
  const { data: events } = await axios.get(`${apiBase}/events`);

  return {
    props: {
      apiBase,
      teams,
      events,
    },
    revalidate: 1800,
  };
}